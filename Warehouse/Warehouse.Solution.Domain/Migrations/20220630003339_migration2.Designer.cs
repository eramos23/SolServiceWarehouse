// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Solution.Domain.DbContexts;

namespace Warehouse.Solution.Domain.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20220630003339_migration2")]
    partial class migration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Warehouse.Solution.Domain.Model.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IdUsuarioCrea")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IdUsuarioModifica")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Vigente")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("empresa");
                });

            modelBuilder.Entity("Warehouse.Solution.Domain.Model.EmpresaSucursal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IdUsuarioCrea")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IdUsuarioModifica")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Vigente")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("empresa_sucursal");
                });

            modelBuilder.Entity("Warehouse.Solution.Domain.Model.Proveedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Correo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Docuemto")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IdEmpresa")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdEmpresaSucursal")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdTipoDocumento")
                        .HasColumnType("char(1)")
                        .HasColumnName("IdTipoDocumento");

                    b.Property<Guid?>("IdUsuarioCrea")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IdUsuarioModifica")
                        .HasColumnType("char(36)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TipoProveedor")
                        .HasColumnType("int");

                    b.Property<bool>("Vigente")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdEmpresaSucursal");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("proveedor");
                });

            modelBuilder.Entity("Warehouse.Solution.Domain.Model.TipoDocumentoIdentidad", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(1)")
                        .HasColumnName("Id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tipo_documento_identidad");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Descripcion = "OTROS TIPOS DE DOCUMENTOS"
                        },
                        new
                        {
                            Id = "1",
                            Descripcion = "DOCUMENTO NACIONAL DE IDENTIDAD (DNI)"
                        },
                        new
                        {
                            Id = "4",
                            Descripcion = "CARNET DE EXTRANJERIA"
                        },
                        new
                        {
                            Id = "6",
                            Descripcion = "REGISTRO ÚNICO DE CONTRIBUYENTES"
                        },
                        new
                        {
                            Id = "7",
                            Descripcion = "PASAPORTE"
                        },
                        new
                        {
                            Id = "A",
                            Descripcion = "CÉDULA DIPLOMÁTICA DE IDENTIDAD"
                        });
                });

            modelBuilder.Entity("Warehouse.Solution.Domain.Model.EmpresaSucursal", b =>
                {
                    b.HasOne("Warehouse.Solution.Domain.Model.Empresa", "Empresa")
                        .WithMany("EmpresaSucursal")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Warehouse.Solution.Domain.Model.Proveedor", b =>
                {
                    b.HasOne("Warehouse.Solution.Domain.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Solution.Domain.Model.EmpresaSucursal", "EmpresaSucursal")
                        .WithMany()
                        .HasForeignKey("IdEmpresaSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Solution.Domain.Model.TipoDocumentoIdentidad", "TipoDocumentoIdentidad")
                        .WithMany()
                        .HasForeignKey("IdTipoDocumento");

                    b.Navigation("Empresa");

                    b.Navigation("EmpresaSucursal");

                    b.Navigation("TipoDocumentoIdentidad");
                });

            modelBuilder.Entity("Warehouse.Solution.Domain.Model.Empresa", b =>
                {
                    b.Navigation("EmpresaSucursal");
                });
#pragma warning restore 612, 618
        }
    }
}
